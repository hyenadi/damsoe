name: Java CI with Gradle + pgvector
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Docker Compose v2
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Start services with Docker Compose
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # 디버깅을 위해 파일 내용 확인
          echo "Checking docker-compose.yml content:"
          cat ./docker-compose.yml
          
          docker-compose -f ./docker-compose-ci.yml up -d
          docker-compose ps
          
          # PostgreSQL이 완전히 준비될 때까지 대기
          echo "Waiting for PostgreSQL to be ready..."
          until docker-compose exec -T postgres pg_isready -U postgres; do
            echo "PostgreSQL is not ready yet..."
            docker-compose logs postgres
            sleep 5
          done
          echo "PostgreSQL is ready!"
          
          # 다른 서비스 상태 확인
          docker-compose ps
          docker-compose logs

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Set Spring environment variables
        run: |
          # 환경 변수 설정
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/postgres" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=postgres" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          # Kafka 연결 설정 (필요한 경우)
          echo "SPRING_KAFKA_BOOTSTRAP_SERVERS=localhost:9092" >> $GITHUB_ENV
          # MongoDB 연결 설정 (필요한 경우)
          echo "SPRING_DATA_MONGODB_URI=mongodb://localhost:27017/test" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Dump logs (on fail)
        if: failure()
        run: |
          echo "Docker Compose Status:"
          docker-compose ps
          echo "PostgreSQL Logs:"
          docker-compose logs postgres
          echo "Kafka Logs:"
          docker-compose logs kafka
          echo "MongoDB Logs:"
          docker-compose logs mongodb
          echo "Zookeeper Logs:"
          docker-compose logs zookeeper

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: hyenadi/damsoe:latest
          platforms: linux/amd64,linux/arm64
